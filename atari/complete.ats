; =======================================
; LOGICAL AND LOAD/STORE TEST SUITE
; =======================================
; Tests all logical operations and load/store addressing modes
; Success code: $AA at $FF if all tests pass
; Failure code: $FF at $FF if any test fails
; Individual test results stored at $80-$FE

; =======================================
; INITIALIZATION
; =======================================

10 LDA #$00        ; Clear accumulator
20 LDX #$00        ; Clear X
30 LDY #$00        ; Clear Y
40 CLC             ; Clear carry
50 CLD             ; Clear decimal mode

; Initialize test result area to $00
60 LDX #$7F        ; Counter for 127 bytes ($80-$FE)
70 INIT_LOOP LDA #$00
80 STA $80,X       ; Clear test result memory
90 DEX
100 BPL INIT_LOOP

; Initialize test data in pages 2 and 3
110 LDX #$00
120 DATA_LOOP TXA
130 STA $0200,X    ; Store index value in page 2
140 EOR #$FF       ; Invert bits
150 STA $0300,X    ; Store inverted value in page 3
160 INX
170 BNE DATA_LOOP

; =======================================
; TEST 1: LOAD OPERATIONS (LDA)
; =======================================

; Test LDA immediate
200 LDA #$A5       ; Load test pattern
210 CMP #$A5       ; Compare with expected
220 BEQ LDA_IMM_OK
230 JMP TEST_FAIL
240 LDA_IMM_OK LDA #$01
250 STA $80        ; Test 1 passed

; Test LDA absolute
260 LDA $0200      ; Load from absolute address (should be $00)
270 CMP #$00
280 BEQ LDA_ABS_OK
290 JMP TEST_FAIL
300 LDA_ABS_OK LDA #$01
310 STA $81        ; Test 2 passed

; Test LDA absolute,X
320 LDX #$10       ; Set X offset
330 LDA $0200,X    ; Load from $0210 (should be $10)
340 CMP #$10
350 BEQ LDA_ABSX_OK
360 JMP TEST_FAIL
370 LDA_ABSX_OK LDA #$01
380 STA $82        ; Test 3 passed

; Test LDA absolute,Y
390 LDY #$20       ; Set Y offset
400 LDA $0200,Y    ; Load from $0220 (should be $20)
410 CMP #$20
420 BEQ LDA_ABSY_OK
430 JMP TEST_FAIL
440 LDA_ABSY_OK LDA #$01
450 STA $83        ; Test 4 passed

; Test LDA zero page
460 LDA #$A6       ; Test value
470 STA $50        ; Store in zero page
480 LDA $50        ; Load back
490 CMP #$A6
500 BEQ LDA_ZP_OK
510 JMP TEST_FAIL
520 LDA_ZP_OK LDA #$01
530 STA $84        ; Test 5 passed

; Test LDA zero page,X
540 LDX #$05       ; Set X offset
550 LDA #$A7       ; Test value
560 STA $55        ; Store at $55
570 LDA $50,X      ; Load from $50+$05 = $55
580 CMP #$A7
590 BEQ LDA_ZPX_OK
600 JMP TEST_FAIL
610 LDA_ZPX_OK LDA #$01
620 STA $85        ; Test 6 passed

; =======================================
; TEST 2: STORE OPERATIONS (STA)
; =======================================

; Test STA absolute
630 LDA #$B1       ; Test value
640 STA $0201      ; Store to absolute address
650 LDA $0201      ; Load back to verify
660 CMP #$B1
670 BEQ STA_ABS_OK
680 JMP TEST_FAIL
690 STA_ABS_OK LDA #$01
700 STA $86        ; Test 7 passed

; Test STA absolute,X
710 LDX #$15       ; Set X offset
720 LDA #$B2       ; Test value
730 STA $0200,X    ; Store to $0215
740 LDA $0215      ; Load back to verify
750 CMP #$B2
760 BEQ STA_ABSX_OK
770 JMP TEST_FAIL
780 STA_ABSX_OK LDA #$01
790 STA $87        ; Test 8 passed

; Test STA absolute,Y
800 LDY #$25       ; Set Y offset
810 LDA #$B3       ; Test value
820 STA $0200,Y    ; Store to $0225
830 LDA $0225      ; Load back to verify
840 CMP #$B3
850 BEQ STA_ABSY_OK
860 JMP TEST_FAIL
870 STA_ABSY_OK LDA #$01
880 STA $88        ; Test 9 passed

; Test STA zero page
890 LDA #$B4       ; Test value
900 STA $60        ; Store to zero page
910 LDA $60        ; Load back to verify
920 CMP #$B4
930 BEQ STA_ZP_OK
940 JMP TEST_FAIL
950 STA_ZP_OK LDA #$01
960 STA $89        ; Test 10 passed

; Test STA zero page,X
970 LDX #$08       ; Set X offset
980 LDA #$B5       ; Test value
990 STA $60,X      ; Store to $68
1000 LDA $68       ; Load back to verify
1010 CMP #$B5
1020 BEQ STA_ZPX_OK
1030 JMP TEST_FAIL
1040 STA_ZPX_OK LDA #$01
1050 STA $8A       ; Test 11 passed

; =======================================
; TEST 3: LDX OPERATIONS
; =======================================

; Test LDX immediate
1060 LDX #$C1      ; Load test value
1070 CPX #$C1      ; Compare with expected
1080 BEQ LDX_IMM_OK
1090 JMP TEST_FAIL
1100 LDX_IMM_OK LDA #$01
1110 STA $8B       ; Test 12 passed

; Test LDX absolute
1120 LDX $0202     ; Load from absolute (should be $02)
1130 CPX #$02
1140 BEQ LDX_ABS_OK
1150 JMP TEST_FAIL
1160 LDX_ABS_OK LDA #$01
1170 STA $8C       ; Test 13 passed

; Test LDX zero page
1180 LDA #$C2      ; Test value
1190 STA $61       ; Store in zero page
1200 LDX $61       ; Load into X
1210 CPX #$C2
1220 BEQ LDX_ZP_OK
1230 JMP TEST_FAIL
1240 LDX_ZP_OK LDA #$01
1250 STA $8D       ; Test 14 passed

; =======================================
; TEST 4: LDY OPERATIONS
; =======================================

; Test LDY immediate
1260 LDY #$D1      ; Load test value
1270 CPY #$D1      ; Compare with expected
1280 BEQ LDY_IMM_OK
1290 JMP TEST_FAIL
1300 LDY_IMM_OK LDA #$01
1310 STA $8E       ; Test 15 passed

; Test LDY absolute
1320 LDY $0203     ; Load from absolute (should be $03)
1330 CPY #$03
1340 BEQ LDY_ABS_OK
1350 JMP TEST_FAIL
1360 LDY_ABS_OK LDA #$01
1370 STA $8F       ; Test 16 passed

; Test LDY zero page
1380 LDA #$D2      ; Test value
1390 STA $62       ; Store in zero page
1400 LDY $62       ; Load into Y
1410 CPY #$D2
1420 BEQ LDY_ZP_OK
1430 JMP TEST_FAIL
1440 LDY_ZP_OK LDA #$01
1450 STA $90       ; Test 17 passed

; =======================================
; TEST 5: LOGICAL OPERATIONS (AND)
; =======================================

; Test AND immediate - all bits clear
1460 LDA #$FF      ; All bits set
1470 AND #$00      ; Clear all bits
1480 CMP #$00      ; Should be zero
1490 BEQ AND1_OK
1500 JMP TEST_FAIL
1510 AND1_OK LDA #$01
1520 STA $91       ; Test 18 passed

; Test AND immediate - some bits
1530 LDA #$F0      ; 11110000
1540 AND #$0F      ; 00001111
1550 CMP #$00      ; Should be 00000000
1560 BEQ AND2_OK
1570 JMP TEST_FAIL
1580 AND2_OK LDA #$01
1590 STA $92       ; Test 19 passed

; Test AND immediate - same pattern
1600 LDA #$AA      ; 10101010
1610 AND #$AA      ; 10101010
1620 CMP #$AA      ; Should be 10101010
1630 BEQ AND3_OK
1640 JMP TEST_FAIL
1650 AND3_OK LDA #$01
1660 STA $93       ; Test 20 passed

; Test AND absolute
1670 LDA #$AA      ; Test pattern
1680 STA $63       ; Store test data
1690 LDA #$55      ; Different pattern
1700 AND $63       ; AND with memory
1710 CMP #$00      ; Should be zero (no common bits)
1720 BEQ AND4_OK
1730 JMP TEST_FAIL
1740 AND4_OK LDA #$01
1750 STA $94       ; Test 21 passed

; =======================================
; TEST 6: LOGICAL OPERATIONS (ORA)
; =======================================

; Test ORA immediate - all bits
1760 LDA #$F0      ; 11110000
1770 ORA #$0F      ; 00001111
1780 CMP #$FF      ; Should be 11111111
1790 BEQ ORA1_OK
1800 JMP TEST_FAIL
1810 ORA1_OK LDA #$01
1820 STA $95       ; Test 22 passed

; Test ORA immediate - no change
1830 LDA #$00      ; 00000000
1840 ORA #$00      ; 00000000
1850 CMP #$00      ; Should be 00000000
1860 BEQ ORA2_OK
1870 JMP TEST_FAIL
1880 ORA2_OK LDA #$01
1890 STA $96       ; Test 23 passed

; Test ORA immediate - partial
1900 LDA #$A0      ; 10100000
1910 ORA #$05      ; 00000101
1920 CMP #$A5      ; Should be 10100101
1930 BEQ ORA3_OK
1940 JMP TEST_FAIL
1950 ORA3_OK LDA #$01
1960 STA $97       ; Test 24 passed

; Test ORA absolute
1970 LDA #$0F      ; Test pattern
1980 STA $64       ; Store test data
1990 LDA #$F0      ; Different pattern
2000 ORA $64       ; ORA with memory
2010 CMP #$FF      ; Should be all bits set
2020 BEQ ORA4_OK
2030 JMP TEST_FAIL
2040 ORA4_OK LDA #$01
2050 STA $98       ; Test 25 passed

; =======================================
; TEST 7: LOGICAL OPERATIONS (EOR)
; =======================================

; Test EOR immediate - toggle all
2060 LDA #$FF      ; 11111111
2070 EOR #$FF      ; 11111111
2080 CMP #$00      ; Should be 00000000
2090 BEQ EOR1_OK
2100 JMP TEST_FAIL
2110 EOR1_OK LDA #$01
2120 STA $99       ; Test 26 passed

; Test EOR immediate - no change
2130 LDA #$AA      ; 10101010
2140 EOR #$00      ; 00000000
2150 CMP #$AA      ; Should be 10101010
2160 BEQ EOR2_OK
2170 JMP TEST_FAIL
2180 EOR2_OK LDA #$01
2190 STA $9A       ; Test 27 passed

; Test EOR immediate - toggle some
2200 LDA #$F0      ; 11110000
2210 EOR #$0F      ; 00001111
2220 CMP #$FF      ; Should be 11111111
2230 BEQ EOR3_OK
2240 JMP TEST_FAIL
2250 EOR3_OK LDA #$01
2260 STA $9B       ; Test 28 passed

; Test EOR absolute
2270 LDA #$55      ; Test pattern
2280 STA $65       ; Store test data
2290 LDA #$AA      ; Different pattern
2300 EOR $65       ; EOR with memory
2310 CMP #$FF      ; Should be all bits set
2320 BEQ EOR4_OK
2330 JMP TEST_FAIL
2340 EOR4_OK LDA #$01
2350 STA $9C       ; Test 29 passed

; =======================================
; TEST 8: BIT OPERATION
; =======================================

; Test BIT instruction
2360 LDA #$C0      ; 11000000 (N=1, V=1)
2370 STA $66       ; Store test pattern
2380 LDA #$FF      ; All bits set for testing
2390 BIT $66       ; Test bits (should set N and V flags)
2400 BMI BIT1_OK   ; Branch if N flag set
2410 JMP TEST_FAIL
2420 BIT1_OK LDA #$01
2430 STA $9D       ; Test 30 passed

; Test BIT with zero result
2440 LDA #$00      ; 00000000
2450 STA $67       ; Store test pattern
2460 LDA #$FF      ; All bits set
2470 BIT $67       ; Test bits (should set Z flag)
2480 BEQ BIT2_OK   ; Branch if Z flag set
2490 JMP TEST_FAIL
2500 BIT2_OK LDA #$01
2510 STA $9E       ; Test 31 passed

; =======================================
; SUCCESS - ALL TESTS PASSED
; =======================================

2520 LDA #$AA      ; Success code
2530 STA $FF       ; Store at final location
2540 END           ; End program

; =======================================
; FAILURE HANDLER
; =======================================

2550 TEST_FAIL LDA #$FF    ; Failure code
2560 STA $FF               ; Store at final location
2570 END                   ; End program

; =======================================
; MEMORY MAP FOR RESULTS
; =======================================
; $80: LDA immediate test
; $81: LDA absolute test
; $82: LDA absolute,X test
; $83: LDA absolute,Y test
; $84: LDA zero page test
; $85: LDA zero page,X test
; $86: STA absolute test
; $87: STA absolute,X test
; $88: STA absolute,Y test
; $89: STA zero page test
; $8A: STA zero page,X test
; $8B: LDX immediate test
; $8C: LDX absolute test
; $8D: LDX zero page test
; $8E: LDY immediate test
; $8F: LDY absolute test
; $90: LDY zero page test
; $91-$94: AND operation tests
; $95-$98: ORA operation tests
; $99-$9C: EOR operation tests
; $9D-$9E: BIT operation tests
; $FF: Final result ($AA = success, $FF = failure)
;
; To verify: Check that $80-$9E all contain $01
; and $FF contains $AA for complete success